{"version":3,"file":"static/js/560.d5a3171b.chunk.js","mappings":"kNACA,EAA0B,gCAA1B,EAAuE,mCAAvE,EAAwH,oC,mBCM3GA,EAA+BC,EAAAA,MAAW,WACrD,OAA8BC,EAAAA,EAAAA,UAAS,IAAG,eAAnCC,EAAO,KAAEC,EAAU,KACpBC,GAAWC,EAAAA,EAAAA,MAEXC,GAASC,EAAAA,EAAAA,KAAY,SAACC,GAAU,OAAKA,EAAMC,KAAKH,MAAM,IAW5D,GAAkBI,EAAAA,EAAAA,MAAXC,EAAC,EAADA,EAAGC,EAAI,EAAJA,MAEVC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAMC,UAAUC,SACtBJ,EAAKK,eAAeH,EACxB,GAAG,IAESC,UAAUC,SAEtB,OACE,iBAAKE,UAAWC,EAAU,WACxB,mBACED,UAAWC,EACXC,SAAqB,UAAXd,EACVe,QAvBqB,WACpBnB,IAILE,GAASkB,EAAAA,EAAAA,IAAYpB,IACrBC,EAAW,IACb,EAgBkC,SAE3BQ,EAAE,mBAGL,qBACEO,UAAWC,EACXI,SAAU,SAACC,GAAC,OAAKrB,EAAWqB,EAAEC,cAAcC,MAAM,EAClDA,MAAOxB,MAIf,IC/CA,MAA0B,yBAA1B,EAAmE,+BAAnE,EAA6G,0BCGhGyB,EAAqD3B,EAAAA,MAChE,YAAkB,IAAfE,EAAO,EAAPA,QACD,OACE,iBAAKgB,UAAWC,EAAU,WACxB,gBACES,IAAK1B,EAAQ2B,MACbC,MAAO,CAAEC,MAAO,OAAQC,aAAc,OACtCC,IAAI,KACH,KACH,cAAGf,UAAWC,EAAW,SAAEjB,EAAQgC,YACnC,mBACA,gBAAKhB,UAAWC,EAAgB,SAAEjB,EAAQA,YAGhD,ICbWiC,EAAyBnC,EAAAA,MAAW,aCLlC,SAAmCoC,GAChD,GAAW,MAAPA,EAAa,MAAM,IAAIC,UAAU,sBAAwBD,EAC/D,CDG0D,IACxD,IAAME,GAAW/B,EAAAA,EAAAA,KAAY,SAACC,GAAU,OAAKA,EAAMC,KAAK6B,QAAQ,IAC1DC,GAAoBC,EAAAA,EAAAA,QAAuB,MACjD,GAAwCvC,EAAAA,EAAAA,WAAS,GAAK,eAA/CwC,EAAY,KAAEC,EAAe,KAqBpC,OANA7B,EAAAA,EAAAA,YAAU,WACW,IAAD,EAAd4B,IACuB,QAAzB,EAAAF,EAAkBI,eAAO,OAAzB,EAA2BC,eAAe,CAAEC,SAAU,WAE1D,GAAG,CAACP,KAGF,iBACER,MAAO,CACLgB,OAAQ,QACRC,UAAW,SACXC,gBAAiB,WAEnBC,SA1BkB,SAACzB,GACrB,IAAI0B,EAAU1B,EAAEC,cAEd0B,KAAKC,IACHF,EAAQG,aAAeH,EAAQI,UAAYJ,EAAQK,cACjD,KAEHd,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,EAEpC,EAe4B,UAEvBJ,EAASkB,KACR,SAACC,EAAoBC,GAAmC,OACtD,SAAC/B,EAAO,CAAYzB,QAASuD,GAAfA,EAAEE,GAAkB,KAGtC,gBAAKC,IAAKrB,MAGhB,IElCMsB,EAAqB7D,EAAAA,MAAW,WACpC,IAAQY,GAASF,EAAAA,EAAAA,MAATE,KAMR,OAJAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAMgD,aAAaC,QAAQ,MACjCnD,EAAKK,eAAeH,EACtB,GAAG,KAED,0BACE,SAACkD,EAAI,KAGX,IAEMA,EAAiBhE,EAAAA,MAAW,WAChC,IAAMI,GAAWC,EAAAA,EAAAA,MAEXC,GAASC,EAAAA,EAAAA,KAAY,SAACC,GAAU,OAAKA,EAAMC,KAAKH,MAAM,IAW5D,OATAO,EAAAA,EAAAA,YAAU,WAGR,OADAT,GAAS6D,EAAAA,EAAAA,OACF,WAEL7D,GAAS8D,EAAAA,EAAAA,MACX,CACF,GAAG,KAGD,yBACc,UAAX5D,GACC,yBAAK,iDAEL,iCACE,SAAC6B,EAAQ,KACT,SAACpC,EAAc,QAKzB,IAEA,GAAeoE,EAAAA,EAAAA,IAAQC,EAAAA,EAAvB,CAAyCP,E","sources":["webpack://deploy/./src/pages/Chat/AddMessageForm.module.css?ea0c","pages/Chat/AddMessageForm.tsx","webpack://deploy/./src/pages/Chat/Message.module.css?9c72","pages/Chat/Message.tsx","pages/Chat/Messages.tsx","../node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js","pages/Chat/ChatPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"sendDiv\":\"AddMessageForm_sendDiv__EzLMx\",\"sendButton\":\"AddMessageForm_sendButton__ZtxPd\",\"messageText\":\"AddMessageForm_messageText__1Xi+f\"};","import React, { useState } from \"react\";\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport s from \"./AddMessageForm.module.css\";\nimport { sendMessage } from \"../../redux/chat-reducer\";\nimport { useTranslation } from \"react-i18next\";\n\nexport const AddMessageForm: React.FC<{}> = React.memo(() => {\n  const [message, setMessage] = useState(\"\");\n  const dispatch = useDispatch();\n\n  const status = useSelector((state: any) => state.chat.status);\n\n  const sendMessageHandler = () => {\n    if (!message) {\n      return;\n    }\n    //@ts-ignore\n    dispatch(sendMessage(message));\n    setMessage(\"\");\n  };\n\n  const {t, i18n} = useTranslation();\n\n  useEffect(() => {\n      const lng = navigator.language;\n      i18n.changeLanguage(lng);\n  }, [])\n\n  const lng = navigator.language;\n\n  return (\n    <div className={s.sendDiv}>\n      <button\n        className={s.sendButton}\n        disabled={status !== \"ready\"}\n        onClick={sendMessageHandler}\n      >\n        {t('myPosts.send')}\n      </button>\n\n      <textarea\n        className={s.messageText}\n        onChange={(e) => setMessage(e.currentTarget.value)}\n        value={message}\n      ></textarea>\n    </div>\n  );\n});\n","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__TReyk\",\"messageOfUser\":\"Message_messageOfUser__RlQFt\",\"username\":\"Message_username__kSbA-\"};","import React from \"react\";\nimport { ChatMessageAPIType } from \"../../api/chat-api\";\nimport s from \"./Message.module.css\";\n\nexport const Message: React.FC<{ message: ChatMessageAPIType }> = React.memo(\n  ({ message }) => {\n    return (\n      <div className={s.message}>\n        <img\n          src={message.photo}\n          style={{ width: \"30px\", borderRadius: \"50%\" }}\n          alt=\"\"\n        />{\" \"}\n        <b className={s.username}>{message.userName}</b>\n        <br />\n        <div className={s.messageOfUser}>{message.message}</div>\n      </div>\n    );\n  }\n);\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { chatMessageType } from \"../../redux/chat-reducer\";\nimport { Message } from \"./Message\";\n\nexport const Messages: React.FC<{}> = React.memo(({}) => {\n  const messages = useSelector((state: any) => state.chat.messages);\n  const messagesAnchorRef = useRef<HTMLDivElement>(null);\n  const [isAutoScroll, setIsAutoScroll] = useState(true);\n\n  const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\n    let element = e.currentTarget;\n    if (\n      Math.abs(\n        element.scrollHeight - element.scrollTop - element.clientHeight\n      ) < 300\n    ) {\n      !isAutoScroll && setIsAutoScroll(true);\n    } else {\n      isAutoScroll && setIsAutoScroll(false);\n    }\n  };\n\n  useEffect(() => {\n    if (isAutoScroll) {\n      messagesAnchorRef.current?.scrollIntoView({ behavior: \"smooth\" });\n    }\n  }, [messages]);\n\n  return (\n    <div\n      style={{\n        height: \"630px\",\n        overflowY: \"scroll\",\n        backgroundColor: \"#ECF5FC\",\n      }}\n      onScroll={scrollHandler}\n    >\n      {messages.map(\n        (m: chatMessageType, index: React.Key | null | undefined) => (\n          <Message key={m.id} message={m} />\n        )\n      )}\n      <div ref={messagesAnchorRef}></div>\n    </div>\n  );\n});\n","export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure \" + obj);\n}","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  startMessagesListening,\n  stopMessagesListening,\n} from \"../../redux/chat-reducer\";\nimport { compose } from \"redux\";\nimport { withAuthNavigate } from \"../../hoc/withAuthNavigate\";\nimport { AddMessageForm } from \"./AddMessageForm\";\nimport { Messages } from \"./Messages\";\nimport { useTranslation } from \"react-i18next\";\n\nconst ChatPage: React.FC = React.memo(() => {\n  const { i18n } = useTranslation();\n\n  useEffect(() => {\n    const lng = localStorage.getItem(\"lg\");\n    i18n.changeLanguage(lng);\n  }, []);\n  return (\n    <div>\n      <Chat />\n    </div>\n  );\n});\n\nconst Chat: React.FC = React.memo(() => {\n  const dispatch = useDispatch();\n\n  const status = useSelector((state: any) => state.chat.status);\n\n  useEffect(() => {\n    //@ts-ignore\n    dispatch(startMessagesListening());\n    return () => {\n      //@ts-ignore\n      dispatch(stopMessagesListening());\n    };\n  }, []);\n\n  return (\n    <div>\n      {status === \"error\" ? (\n        <div>Some error occured, please refresh the page</div>\n      ) : (\n        <>\n          <Messages />\n          <AddMessageForm />\n        </>\n      )}\n    </div>\n  );\n});\n\nexport default compose(withAuthNavigate)(ChatPage);\n"],"names":["AddMessageForm","React","useState","message","setMessage","dispatch","useDispatch","status","useSelector","state","chat","useTranslation","t","i18n","useEffect","lng","navigator","language","changeLanguage","className","s","disabled","onClick","sendMessage","onChange","e","currentTarget","value","Message","src","photo","style","width","borderRadius","alt","userName","Messages","obj","TypeError","messages","messagesAnchorRef","useRef","isAutoScroll","setIsAutoScroll","current","scrollIntoView","behavior","height","overflowY","backgroundColor","onScroll","element","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","index","id","ref","ChatPage","localStorage","getItem","Chat","startMessagesListening","stopMessagesListening","compose","withAuthNavigate"],"sourceRoot":""}